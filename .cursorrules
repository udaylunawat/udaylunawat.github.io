# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task completed
[ ] Task pending

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.

## Task: Create interactive control panel for background.js and particles.js settings - COMPLETED âœ…

[X] Create hidden interactive control panel with toggle
[X] Add background.js controls (colors, position, rotation, scale, animation speeds)
[X] Add particles.js controls (number, color, size, movement, interactivity)
[X] Add particles opacity feature - NEW CONTROL ADDED
[X] Implement real-time parameter updates
[X] Add keyboard shortcut to toggle panel (removed - now uses visible button)
[X] Test panel functionality and live preview
[X] Update scratchpad/lessons when complete
[X] Enhance CSS for desktop and mobile friendly design

### Implementation Summary:
- âœ… Interactive control panel with tabbed interface
- âœ… Particles.js integration: Number, Speed, Size, Color, Opacity controls
- âœ… Background.js integration: Colors, Position, Rotation, Scale, Animation parameters
- âœ… Real-time parameter updates with live preview
- âœ… Mobile-responsive design with enhanced CSS
- âœ… Modern UI with glassmorphism effects and smooth animations
- âœ… Preset system for quick configuration changes
- âœ… Cross-device compatibility optimized

### Key Features Implemented:
1. **Particles Controls**:
   - Particle Count (1-100)
   - Particle Speed (0.5-10)
   - Particle Size (2-20px)
   - **NEW: Particle Opacity (0.1-1.0)**
   - Link Opacity (0.1-1.0)
   - Particle Color picker with hex display

2. **Background Controls**:
   - Animation Speed/Frequency controls
   - Distortion parameters
   - Wave phase offsets

3. **UI/UX Enhancements**:
   - Responsive design for mobile and desktop
   - Touch-friendly controls
   - Visual feedback and animations
   - Comprehensive preset system

### Technical Implementation Details:
- Used particles.js library for particle system
- Integrated with custom WebGL background (background.js)
- Real-time parameter updates via slider inputs
- Mobile-optimized touch targets and responsiveness
- Enhanced CSS with modern styling and accessibility

### All requirements satisfied! ðŸŽ‰

You should use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task completed
[ ] Task pending

You should use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task completed
[ ] Task pending

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `tools/web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or `gh pr create -F <filename>` and then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## COMPLETED TASK: Improved Color Picker CSS for Cross-Device Compatibility

[X] Analyze current particles control panel implementation
[X] Add HTML color picker control for particles
[X] Implement JavaScript functionality to update particles.js color
[X] Integrate color picker with existing real-time update system
[X] Enhance CSS for desktop and mobile friendly design
[X] Add responsive design improvements
[X] Test color picker functionality and live updates
[X] Update scratchpad with completion status

### Implementation Details:
- Added comprehensive CSS styling for `.color-picker`, `.color-control`, and `.color-display`
- Implemented responsive design with specific breakpoints for mobile (768px/480px)
- Added touch-friendly enhancements for mobile devices
- Enhanced accessibility with focus states and reduced motion support
- Improved visual design with gradients, shadows, and hover effects
- Maintained compatibility with existing preset system

### CSS Enhancements Added:
1. **Color Picker Styling**: Custom sizing (60px desktop, 70-80px mobile), hover effects, focus states
2. **Viewport Responsive**: Different sizes for desktop, tablet, and mobile devices
3. **Touch-Friendly**: Larger touch targets (44px minimum) for mobile accessibility
4. **Visual Design**: Gradient backgrounds, custom shadows, rounded corners
5. **Accessibility**: Focus indicators, reduced motion support, high contrast mode
6. **Container Styling**: Enhanced `.color-control` with background and border effects

### Responsive Breakpoints:
- **Desktop (769px+)**: 65px color picker with sophisticated hover effects
- **Tablet (481-768px)**: 70px color picker with touch-friendly sizing
- **Mobile (â‰¤480px)**: 80px color picker, stacked layout when needed
- **Small Mobile**: Circular color picker for very small screens

### Testing Results:
âœ… Server running at http://127.0.0.1:8000
âœ… Color picker working across all device sizes
âœ… Touch interactions optimized for mobile
âœ… Accessibility features working properly
âœ… Integration with presets system maintained

### Next Steps:
Task completed successfully! All requirements met:
- âœ… Color picker fully responsive across devices
- âœ… Mobile accessibility standards met (44px touch targets)
- âœ… Desktop user experience enhanced
- âœ… Real-time color updates working perfectly
- âœ… Maintains compatibility with existing system
- âœ… User can customize particle colors with excellent UX
